<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-05-02T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Middleman Inline Assets</title>
    <link rel="alternate" href="/2013/05/02/middleman-inline-assets.html"/>
    <id>/2013/05/02/middleman-inline-assets.html</id>
    <published>2013-05-02T00:00:00Z</published>
    <updated>2013-05-02T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;Every now &amp;amp; then, a specific project needs the ability to compile assets into an inline format. Could be used in copy/paste applications or in HTML emails. But at the same time, we like to develop using our pre-processors and separate file structure.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Every now &amp;amp; then, a specific project needs the ability to compile assets into an inline format. Could be used in copy/paste applications or in HTML emails. But at the same time, we like to develop using our pre-processors and separate file structure.&lt;/p&gt;

&lt;p&gt;Well if you happen to be using &lt;a href='http://middlemanapp.com/'&gt;Middleman&lt;/a&gt; (or possibly any other ruby application), this is your lucky day.&lt;/p&gt;

&lt;h2 id='css'&gt;CSS&lt;/h2&gt;

&lt;h3 id='head'&gt;&amp;#60;head&amp;#62;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% css_path = sitemap.resources.select { |p| p.source_file.match(/app[.]css[.]scss$/) }.first %&amp;gt;
&amp;lt;style&amp;gt;
    &amp;lt;%= css_path.render %&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='configrb'&gt;config.rb&lt;/h3&gt;

&lt;p&gt;If the styles need to be compressed, just add the following to your middleman config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compass_config do |config|
  config.output_style = :compressed
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id='javascript'&gt;Javascript&lt;/h2&gt;

&lt;p&gt;And if you&amp;#8217;re happening to be using the sprockets engine to compile Javascript, just replace the javascript_include_tag helper with the following.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
// relative to your defined javascript folder
&amp;lt;%= sprockets.find_asset('modernizr.js').to_s %&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if you would like to compress your javascript inline:&lt;/p&gt;

&lt;h3 id='compression'&gt;Compression&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% app_js = sprockets.find_asset('app.js').to_s %&amp;gt;
&amp;lt;script&amp;gt;
&amp;lt;%= defined?(Uglifier) ? Uglifier.compile(app_js) : app_js %&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when your minify_javascript is set in the config.rb, your javascript will be compressed inline.&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Keep in mind, these are solutions that I (a frontend developer) have come up with. I am not a &amp;#8220;ruby developer&amp;#8221; by any means, so there are probably a ton of other ways to achieve inline assets, this just happens to be the best way I have come up with.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Outlook 2013 Email Space Rendering Issue</title>
    <link rel="alternate" href="/2013/02/06/outlook-2013-spacing.html"/>
    <id>/2013/02/06/outlook-2013-spacing.html</id>
    <published>2013-02-06T00:00:00Z</published>
    <updated>2013-02-06T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;Are you noticing extra spacing above images in Outlook 2013? Well, there&amp;#8217;s yet another email hack that you&amp;#8217;ll have to apply to all of your HTML emails to address this issue.&lt;/p&gt;

&lt;h2 id='heres_how_your_markup_probably_currently_looks_like_for_the_image'&gt;Here&amp;#8217;s how your markup probably currently looks like for the image&lt;/h2&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;table border=&amp;quot;0&amp;quot; cellspacing=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot;&amp;amp;gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;Are you noticing extra spacing above images in Outlook 2013? Well, there&amp;#8217;s yet another email hack that you&amp;#8217;ll have to apply to all of your HTML emails to address this issue.&lt;/p&gt;

&lt;h2 id='heres_how_your_markup_probably_currently_looks_like_for_the_image'&gt;Here&amp;#8217;s how your markup probably currently looks like for the image&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table border="0" cellspacing="0" cellpadding="0"&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;img src="../image.png" alt="Image" width="500" height="8" style="display: block;" /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;img src="../image.png" alt="Image" width="500" height="40" style="display: block;" /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with Outlook is every table cell you use contains a specific line height which is probably defined by the email client.&lt;/p&gt;

&lt;p&gt;So for most images, you might not see this extra space, but as in the example above, you&amp;#8217;ll see one of the images has a height of 8 pixels. Most document line heights are going to be around 20 something pixels. Since this image is smaller than the line-height, Outlook will use the line height to fill in the rest of that cell.&lt;/p&gt;

&lt;h2 id='heres_the_fix'&gt;Here&amp;#8217;s the fix&lt;/h2&gt;

&lt;p&gt;Add the &lt;em&gt;height&lt;/em&gt; and &lt;em&gt;line-height&lt;/em&gt; properties to the image&amp;#8217;s parent cell with the same value of the image&amp;#8217;s height.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table border="0" cellspacing="0" cellpadding="0"&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td &lt;span class='highlight'&gt;style="height: 8px; line-height: 8px;"&lt;/span&gt;&amp;gt;&amp;lt;img src="../image.png" alt="Image" width="500" height="8" style="display: block;" /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;img src="../image.png" alt="Image" width="500" height="40" style="display: block;" /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>Pull a thumbnail gallery from Picasa's API</title>
    <link rel="alternate" href="/2011/03/27/picasa-javascript-gallery.html"/>
    <id>/2011/03/27/picasa-javascript-gallery.html</id>
    <published>2011-03-27T00:00:00Z</published>
    <updated>2011-03-27T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;You will notice (currently at the top) on my site that I have a small list of featured thumbnails which will link to each individual picture in my &lt;a href='https://picasaweb.google.com/dmmendez' target='_blank'&gt;Picasa Web Album&lt;/a&gt;.&amp;#160; Just for reference, &lt;a href='http://code.google.com/apis/picasaweb/docs/2.0/reference.html' target='_blank'&gt;Picasa has a nice api&lt;/a&gt; where you can pull a myriad of feeds and different types of feeds.&amp;#160; In my case, I just wanted to pull in six thumbnails from a specific album named &amp;#34;Featured&amp;#34; in a JSON format.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;You will notice (currently at the top) on my site that I have a small list of featured thumbnails which will link to each individual picture in my &lt;a href='https://picasaweb.google.com/dmmendez' target='_blank'&gt;Picasa Web Album&lt;/a&gt;.&amp;#160; Just for reference, &lt;a href='http://code.google.com/apis/picasaweb/docs/2.0/reference.html' target='_blank'&gt;Picasa has a nice api&lt;/a&gt; where you can pull a myriad of feeds and different types of feeds.&amp;#160; In my case, I just wanted to pull in six thumbnails from a specific album named &amp;#34;Featured&amp;#34; in a JSON format.&lt;/p&gt;

&lt;p&gt;Starting off, here is the exact url I used to pull in my feed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://picasaweb.google.com/data/feed/base/user/113822536772850233036/albumid/5587272886788976673?kind=photo&amp;amp;amp;max-results=6&amp;amp;amp;thumbsize=80&amp;amp;amp;alt=json&amp;amp;amp;fields=entry(link[@rel=&amp;amp;#39;alternate&amp;amp;#39;],media:group(media:thumbnail))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the numbers before the query string are just user and album id&amp;#39;s you need from your album.&amp;#160; You can find more information in the &lt;a href='http://code.google.com/apis/picasaweb/docs/2.0/reference.html' target='_blank'&gt;API&lt;/a&gt;.&amp;#160; You can find these values easily by browsing your Picasa albums and looking at the url and RSS feeds.&lt;/p&gt;

&lt;p&gt;Now, I&amp;#39;ll break down each parameter just to simply show what I did (although the API does way more than what I&amp;#39;m showing).&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;kind&lt;/td&gt;
            &lt;td&gt;photo&lt;/td&gt;
            &lt;td&gt;Let&amp;#39;s you request different kinds of feeds&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;max-results&lt;/td&gt;
            &lt;td&gt;6&lt;/td&gt;
            &lt;td&gt;Maximun number of results&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;thumbsize&lt;/td&gt;
            &lt;td&gt;80&lt;/td&gt;
            &lt;td&gt;Size of thumbnail, which is variable.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;alt&lt;/td&gt;
            &lt;td&gt;json&lt;/td&gt;
            &lt;td&gt;Type of feed, default is RSS&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;fields&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;
                    entry(&lt;br /&gt;
                    &amp;nbsp;link[@rel=&amp;#39;alternate&amp;#39;],&lt;br /&gt;
                    &amp;nbsp;media:group(media:thumbnail)&lt;br /&gt;
                    )&lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;This option dictates what fields come through to your field.&amp;nbsp; So if you don&amp;#39;t want to clutter your feed with values you won&amp;#39;t use, that can be controlled here.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;My favorite option had to be the &amp;#34;fields&amp;#34; parameter, just because it allows me to really narrow my feeds down so it&amp;#39;s not so cluttered with useless values.&lt;/p&gt;

&lt;p&gt;Enjoy pulling your feeds from Picasa.&lt;/p&gt;</content>
  </entry>
</feed>
